

<div class="details">
    <h1>Account Details</h1>
    <EditForm id="basicInfo" FormName="BasicInfo" Model="Profile" OnSubmit="SaveBasicInfo" method="post" novalidate class="basic-info">
        <DataAnnotationsValidator />
        <h4>Basic Info</h4>
        <div class="group">
            <div class="label-input">
                <label>First Name</label>
                <ValidationMessage For="@(() => Profile.FirstName)" />
                <InputText placeholder="Enter your first name" class="input" type="text" @bind-Value="Profile.FirstName" />
            </div>
            <div class="label-input">
                <label>Last Name</label>
                <ValidationMessage For="@(() => Profile.LastName)" />
                <InputText placeholder="Enter your last name" class="input" type="text" @bind-Value="Profile.LastName" />
            </div>
        </div>
        <div class="group">
            <div class="label-input">
                <label>Email</label>
                <ValidationMessage For="@(() => Profile.Email)" />
                <InputText placeholder="Enter your email" class="input" type="text" @bind-Value="Profile.Email" />
            </div>
            <div class="label-input">
                <label>Phone (optional)</label>
                <ValidationMessage For="@(() => Profile.Phone)" />
                <InputText placeholder="Enter your phone" class="input" type="text" @bind-Value="Profile.Phone" />
            </div>
        </div>
        <div>
            <label>Bio (optional)</label>
            <InputTextArea class="input" placeholder="Add a short bio..." @bind-Value="Profile.Bio"></InputTextArea>
        </div>
        <ValidationMessage For="@(() => Profile.Bio)" />
        <div class="buttons">
            <button class="btn-gray" type="reset">Cancel</button>
            <button class="btn-theme" type="submit">Save changes</button>
        </div>
    </EditForm>

    <EditForm FormName="AddressInfo" Model="Address" OnSubmit="SaveAddressInfo" id="addressInfo" method="post" novalidate class="address">
        <h4>Address</h4>
        <div class="address-lines">
            <div class="label-input">
                <label>Address line 1</label>
                <ValidationMessage For="@(() => Address.AddresLine1)" />
                <InputText @bind-Value="Address.AddresLine1" class="input" type="text"/>
            </div>
            <div class="label-input">
                <label>Address line 2 (optional)</label>
                <InputText @bind-Value="Address.AddresLine2" class="input" type="text"/>
            </div>
        </div>
        <div class="group">
            <div class="label-input">
                <label>Postal code</label>
                <ValidationMessage For="@(() => Address.PostalCode)" />
                <InputText @bind-Value="Address.PostalCode" class="input"/>
            </div>
            <div class="label-input">
                <label>City</label>
                <ValidationMessage For="@(() => Address.City)" />
                <InputText @bind-Value="Address.City" class="input" type="text"/>
            </div>
        </div>
        <div class="buttons">
            <button type="reset" class="btn-gray">Cancel</button>
            <button type="submit" class="btn-theme">Save changes</button>
        </div>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    public ProfileModel Profile { get; set; } = new();

    [SupplyParameterFromForm]
    public ProfileAddressModel Address { get; set; } = new();

    [Parameter]
    public ApplicationUser User { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        if (User != null)
        {
            Profile.FirstName = User.FirstName;
            Profile.LastName = User.LastName;
            Profile.Email = User.Email!;
            Profile.Phone = User.PhoneNumber;
            Profile.Bio = User.Bio;
            
            var address = Context.Adresses.FirstOrDefault(x => x.UserId == User.Id);

            if (address != null)
            {
                Address.AddresLine1 = address.AddressLine1;
                Address.AddresLine2 = address.AddressLine2;
                Address.PostalCode = address.PostalCode;
                Address.City = address.City;
            }
        }
    }

    public async Task SaveBasicInfo()
    {
        var user = await UserManager.FindByEmailAsync(User.Email!);
        user.FirstName = Profile.FirstName;
        user.LastName = Profile.LastName;
        user.Email = Profile.Email!;
        user.PhoneNumber = Profile.Phone;
        user.Bio = Profile.Bio;
        await UserManager.UpdateAsync(user);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    public async Task SaveAddressInfo()
    {
        try
        {
            var user = await UserManager.FindByEmailAsync(User.Email!);

            if (user != null)
            {
                var address = Context.Adresses.FirstOrDefault(x => x.UserId == User.Id);

                if (address != null)
                {
                    address.AddressLine1 = Address.AddresLine1;
                    address.AddressLine2 = Address.AddresLine2;
                    address.PostalCode = Address.PostalCode;
                    address.City = Address.City;
                    await Context.SaveChangesAsync();
                }
                else
                {
                    address = new AddressEntity
                        {
                            UserId = user.Id,
                            AddressLine1 = Address.AddresLine1,
                            AddressLine2 = Address.AddresLine2,
                            PostalCode = Address.PostalCode,
                            City = Address.City
                        };

                    Context.Add(address);
                    await Context.SaveChangesAsync();
                }
            }

            NavigationManager.NavigateTo(NavigationManager.Uri, true);

        }
        catch { }
    }

    public class ProfileModel
    {
        [Display(Name = "First name", Prompt = "Enter your first name", Order = 0)]
        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; } = null!;

        [Display(Name = "Last name", Prompt = "Enter your last name", Order = 1)]
        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; } = null!;

        [DataType(DataType.EmailAddress)]
        [Required(ErrorMessage = "Invalid email")]
        [Display(Name = "Email address", Prompt = "Enter your email address", Order = 2)]
        [RegularExpression("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$", ErrorMessage = "Email address is required")]
        public string Email { get; set; } = null!;

        [DataType(DataType.PhoneNumber)]
        [Display(Name = "Phone", Prompt = "Enter your phone", Order = 3)]
        public string? Phone { get; set; }

        [DataType(DataType.MultilineText)]
        [Display(Name = "Bio", Prompt = "Add a short bio...", Order = 4)]
        public string? Bio { get; set; }
    }

    public class ProfileAddressModel
    {
        [Display(Name = "Address line 1", Prompt = "Enter your address line", Order = 0)]
        [Required(ErrorMessage = "Address line is required")]
        public string AddresLine1 { get; set; } = null!;

        [Display(Name = "Address line 2", Prompt = "Enter your second address line", Order = 1)]
        public string? AddresLine2 { get; set; }

        [Display(Name = "Postal code", Prompt = "Enter your postal code", Order = 2)]
        [Required(ErrorMessage = "Postal code is required")]
        [DataType(DataType.PostalCode)]
        public string PostalCode { get; set; } = null!;

        [Display(Name = "City", Prompt = "Enter your city", Order = 3)]
        [Required(ErrorMessage = "City is required")]
        public string City { get; set; } = null!;
    }
}
