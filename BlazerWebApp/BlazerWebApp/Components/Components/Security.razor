@using Microsoft.Azure.ServiceBus
@using System.Text
@using Newtonsoft.Json
<div class="security">
    <h1>Security</h1>
    <EditForm FormName="PasswordForm" Model="passwordModel" OnValidSubmit="SavePassword" method="post" novalidate class="basic-info">
        <DataAnnotationsValidator />
        <h4>Password</h4>
        <p class="message @((@StatusClass != "Success") ? "error" : "success")">@StatusMessage</p>
        <div class="current-password">
            <div class="label-input">
                <div class="label-span">
                    <label for="">Current password</label>
                    <ValidationMessage For="@(() => passwordModel.CurrentPassword)" />
             </div>
                <InputText @bind-Value="passwordModel.CurrentPassword" type="password" placeholder="********" class="input" />
            </div>
        </div>
        <div class="group">
            <div class="label-input">
                <div class="label-span">
                    <label>New password</label>
                    <ValidationMessage For="@(() => passwordModel.NewPassword)" />
                </div>
                <InputText @bind-Value="passwordModel.NewPassword" type="password" placeholder="********" class="input" />
            </div>
            <div class="label-input">
                <div class="label-span">
                    <label> Confirm password</label>
                    <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" />
                </div>
                <InputText @bind-Value="passwordModel.ConfirmPassword" type="password" placeholder="********" class="input" />
            </div>
        </div>
        <div class="buttons">
            <button type="reset" class="btn-gray">Cancel</button>
            <button type="submit" class="btn-theme">Send Confirmation Code</button>
        </div>
    </EditForm>

    <EditForm FormName="ConfirmForm" Model="confirmModel" OnValidSubmit="SubmitConfirmationCode" class="basic-info bottom-border">
        <div class="label-input">
            <div class="label-span">
                <label>Confirm code to change password</label>
            </div>
            <InputText @bind-Value="confirmModel.ConfirmationCode" type="text" placeholder="Provide confirmation code here" class="input current-password" />
        </div>

        <div class="buttons">
            <button type="submit" class="btn-theme">Confirm code</button>
        </div>
    </EditForm>

    <EditForm FormName="DeleteForm" Model="deleteModel" OnValidSubmit="Submit" method="post" novalidate class="delete-account">
        <h4>Delete account</h4>
        <p>When you delete your account, your public profile will be deactivated immediately. If you change your mind before the 14 days are up, sign in with your email and password, and we’ll send you a link to reactivate your account.</p>
        <input type="hidden" name="ReturnUrl" value="" />
        <div class="checkbox">
            <InputCheckbox @bind-Value="deleteModel.DeleteConfirm" />
            <ValidationMessage For="@(() => deleteModel.DeleteConfirm)" />
            <p>Yes, I want to delete my account.</p>
        </div>
        <button type="submit" class="btn-red">Delete</button>
    </EditForm>

    @if (submitted)
    {
        <form action="Account/Logout" method="post">
            <AntiforgeryToken />
            <p class="message error">Confirm you want to delete your account</p>
            <input type="hidden" name="ReturnUrl" value="" />
            <button type="submit" @onclick="DeleteUser" class="btn-red">Confirm</button>
        </form>
    }
    
</div>

@code {
    [Parameter]
    public ApplicationUser User { get; set; } = null!;

    [SupplyParameterFromForm]
    public PasswordModel passwordModel { get; set; } = new();

    [SupplyParameterFromForm]
    public ConfirmCodeModel confirmModel { get; set; } = new();

    [SupplyParameterFromForm]
    public DeleteModel deleteModel { get; set; } = new();

    public string StatusMessage { get; set; } = "";
    public string StatusClass { get; set; } = "";
    public bool submitted;

    private string ServiceBusConnectionString = "Endpoint=sb://sb-silicon-hl.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=8q4LwR2nJFJtDW2ggc49CnbClwaD+yGBd+ASbGs0X38=";

    public class PasswordModel
    {
        [Display(Name = "Current Password", Prompt = "Enter current password", Order = 0)]
        [Required(ErrorMessage = "Current password is required")]
        public string CurrentPassword { get; set; } = null!;

        [Display(Name = "New Password", Prompt = "Enter new password", Order = 1)]
        [Required(ErrorMessage = "Invalid Password")]
        [DataType(DataType.Password)]
        [RegularExpression("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()\\-_=+{};:,<.>]).{8,}$", ErrorMessage = "Invalid password")]
        public string NewPassword { get; set; } = null!;

        [Display(Name = "Confirm password", Prompt = "Confirm your password", Order = 4)]
        [Required(ErrorMessage = "Password doesn't match")]
        [DataType(DataType.Password)]
        [Compare(nameof(NewPassword), ErrorMessage = "Password doesn't match")]
        public string ConfirmPassword { get; set; } = null!;
    }

    public class DeleteModel
    {
        [Required(ErrorMessage = "Confirmation required")]
        public bool DeleteConfirm { get; set; } = false;
    }

    public class ConfirmCodeModel
    {
        public string ConfirmationCode { get; set; } = null!;
    }

    public async Task SavePassword()
    {
        var user = await UserManager.FindByIdAsync(User.Id);
        if (user != null)
        {
            var correctCurrentPassword = await UserManager.CheckPasswordAsync(user, passwordModel.CurrentPassword);

            if (correctCurrentPassword)
            {
                try
                {
                    var message = new Message(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(new { Email = User.Email })));

                    var queueClient = new QueueClient(ServiceBusConnectionString, "verification_request");
                    await queueClient.SendAsync(message);

                    StatusMessage = "A confirmationcode has been sent to your email";
                    StatusClass = "Success";
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                }
            }
            else
            {
                StatusMessage = "Wrong current password";
                StatusClass = "Error";
            }
        }
    }

    public async Task SubmitConfirmationCode()
    {
        if (HttpContextAccessor.HttpContext!.Request.Cookies.TryGetValue("AccessToken", out var token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
        else
        {
            await CookieService.GetToken(User.Id, User.Email!);
        }
        var result = await Http.PostAsJsonAsync("https://verificationprovider-silicon-hl.azurewebsites.net/api/validate?code=XeJPP7EcDM1weH1kDVqcrSuK0xNZtxEQx6gNwD8NSqjIAzFuLbSlcw==", new { Email = User.Email, Code = confirmModel.ConfirmationCode });

        if (result.IsSuccessStatusCode)
        {
            var user = await UserManager.FindByEmailAsync(User.Email!);
            await UserManager.UpdateAsync(user);
            
            var changePasswordResult = await UserManager.ChangePasswordAsync(user!, passwordModel.CurrentPassword, passwordModel.NewPassword);
            if (changePasswordResult.Succeeded)
            {
                StatusMessage = "Password was updated!";
                StatusClass = "Success";
            }
            else
            {
                StatusMessage = "Something went wrong.";
                StatusClass = "Error";
            }
        }
        else
        {
            StatusMessage = "Invald code";
        }
    }

    public void Submit()
    {
            if (deleteModel.DeleteConfirm)
            {        
                submitted = true;
            }
            else
            {
                StatusMessage = "Checkbox required to delete account.";
                StatusClass = "Error";
            }
    }

    public async Task DeleteUser()
    {
        var user = await UserManager.FindByIdAsync(User.Id);
        if (user != null)
        {
            await UserManager.DeleteAsync(user);
        }
    }
}