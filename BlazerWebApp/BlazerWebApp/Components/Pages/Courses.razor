@page "/Courses"
@rendermode InteractiveServer
@using Newtonsoft.Json

<section class="courses-section">
    <div class="container">
        <div class="title-inputs">
            <h1 class="header1">Courses</h1>
            <select class="select-input">
                <option value="categories-all">All categories</option>
                <option value="category1">Best seller</option>
                <option value="category2">Reduced price</option>
                <option value="category3">Saved courses</option>
            </select>
            <input id="courseSearch" class="search-input" type="text" placeholder="Search courses">
            <i class="fa-regular fa-magnifying-glass" style="color: #33354D;"></i>
        </div>
        <div class="courses-all">

            @foreach (CourseCardModel course in courseList)
            {
                <div class="oneCourse">
                    <div class="btn-tooltip">
                        <EditForm FormName="@course.Id" Model="courseIdModel" OnValidSubmit="(() => SaveCourseToUser(course.Id))" method="post">
                            <InputText @bind-Value="courseIdModel.CourseId" hidden class="tool-tip">Save</InputText>
                            <button class="saveCourseBtn @(SavedCourses.Contains(course.Id) ? "saved" : "")"> <i class=" fa-sharp fa-regular fa-circle-bookmark"></i></button>
                        </EditForm>
                    </div>

                    @if (course.IsBestSeller)
                    {
                        <p class="bestSeller">Best seller</p>
                    }

                    <a href="@("/course?courseid=" + course.Id)" class="oneCourseLink">
                        <img src="@course.ImageUri" alt="Image from the course">
                        <div class="course-info">
                            <h5 class="header5">@course.Title</h5>
                            <p class="author">By Robert Fox</p>
                            <div class="prices">

                                @if (course.Prices!.Discount == 0)
                                {
                                    <p class="price">@course.Prices.Currency@course.Prices.Price</p>
                                }
                                else
                                {
                                    <p class="price color-danger">@course.Prices.Currency@course.Prices.Discount</p>
                                    <p class="reducedPrice">@course.Prices.Currency@course.Prices.Price</p>
                                }

                            </div>
                            <div class="hours-and-rating">
                                <i class="fa-regular fa-clock" style="color: #9397AD;"></i>
                                <p class="hours text-s">@course.Duration hours</p>
                                <i class="fa-regular fa-thumbs-up" style="color: #9397AD;"></i>
                                <p class="rating text-s">@course.LikesPercent (@course.Likes)</p>
                            </div>
                        </div>
                    </a>
                </div>
            }

        </div>
    </div>
    <div class="page-numbers">
        <a asp-action="Index" asp-controller="Courses" asp-route-pageNumber="" class="arrow">&lt;</a>
        <a asp-action="Index" asp-controller="Courses" asp-route-pageNumber="1" class="number active">1</a>
        <a asp-action="Index" asp-controller="Courses" asp-route-pageNumber="" class="number">2</a>
        <a asp-action="Index" asp-controller="Courses" asp-route-pageNumber="" class="number">3</a>
    </div>
</section>

@code {
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    public CourseCardModel courseCardModel = new();
    public SaveCourseModel courseIdModel = new();
    public List<CourseCardModel> courseList { get; set; } = [];
    public ApplicationUser User = new();
    public List<string> SavedCourses = [];

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQLQuery { Query = "query { getCourses { id isBestSeller imageUri title authors {name} prices {price currency discount} duration likesPercent likes } }" };
        var response = await Http.PostAsJsonAsync("https://courseprovider-silicon-hl.azurewebsites.net/api/graphql?code=7HxNcs9s7LTbK8xSkGVLN9W6v5XDgOJCcj_D31kwYSgGAzFu9L-qMg%3D%3D", query);

        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<RootObject>(jsonString);

            foreach (var course in result!.Data.GetCourses)
            {
                courseList.Add(course);
            }
        }

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaims = authenticationState.User;

        User = await UserManager.GetUserAsync(userClaims);

        var userCourses =  Context.UserCourses.Where(x => x.UserId == User.Id).ToList();

        foreach (var course in userCourses)
        {
            SavedCourses.Add(course.CourseId);
        }
    }

    // private void NavigateToCourse(string courseId)
    // {
    //     RedirectManager.RedirectTo("/Course", new() { ["courseId"] = courseId, ["returnUrl"] = ReturnUrl });
    // }

    private async Task SaveCourseToUser(string courseId)
    {
        if (User != null)
        {
            var result = Context.UserCourses.FirstOrDefault(x => x.UserId == User.Id && x.CourseId == courseId);

            if (result == null)
            {
                var userCourse = new UserCourses
                    {
                        UserId = User.Id,
                        CourseId = courseId
                    };

                Context.Add(userCourse);
                await Context.SaveChangesAsync();
                SavedCourses.Add(courseId);
            }
            else
            {
                Context.Remove(result);
                await Context.SaveChangesAsync();
                SavedCourses.Remove(courseId);
            }
        }
    }

    private bool CheckIfCourseIsSaved(string courseId)
    {
        var userCourse = new UserCourses
            {
                UserId = User.Id,
                CourseId = courseId
            };
        var result = Context.UserCourses.FirstOrDefault(x => x.UserId == User.Id && x.CourseId == courseId);

        if (result == null)
        {
            return false;
        }

        return true;
    }

    public class GraphQLQuery
    {
        public string Query { get; set; } = null!;
    }

    public class AuthorModel
    {
        public string? Name { get; set; }
    }

    public class PriceModel
    {
        public decimal Price { get; set; }
        public string? Currency { get; set; }
        public decimal Discount { get; set; }
    }

    public class CourseCardModel
    {
        public string Id { get; set; } = null!;
        public string ImageUri { get; set; } = null!;
        public bool IsBestSeller { get; set; }
        public string? Title { get; set; }
        public List<AuthorModel>? Authors { get; set; }
        public PriceModel? Prices { get; set; }
        public string? Duration { get; set; }
        public string? LikesPercent { get; set; }
        public string? Likes { get; set; }
    }

    public class GetCoursesResponse
    {
        public List<CourseCardModel> GetCourses { get; set; } = null!;
    }

    public class RootObject
    {
        public GetCoursesResponse Data { get; set; } = null!;
    }

    public class SaveCourseModel
    {
        public String CourseId { get; set; } = null!;
    }
}
