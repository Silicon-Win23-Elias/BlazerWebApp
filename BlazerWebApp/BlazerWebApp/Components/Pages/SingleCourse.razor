@page "/Course"
@using Newtonsoft.Json
@rendermode InteractiveServer
@using BlazerWebApp.Models

<section class="single-course-section">
    @if (CourseCardModel != null)
    {
        <img class="bkg-img" src="@CourseCardModel.ImageHeaderUri" alt="Course image">

        <div class="container">
            <UpperSection CourseCardModel="CourseCardModel" />
            <div class="course-info">
                <JoinCourse ContentModel="CourseCardModel" />
            </div>

            <div class="program-details">
                <h2 class="display6">Program Details</h2>
                <ProgramDetail ContentModel="ContentModel" />
            </div>
        </div>
    }
    else
    {
        <p>Loading course data...</p>
    }
    
</section>

@code {
    [SupplyParameterFromQuery]
    private string? CourseId { get; set; }

    public ContentObject ContentModel { get; set; } = null!;
    public CourseCardModel CourseCardModel { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await GetSingleCourse();
    }

    public async Task GetSingleCourse()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claims = authenticationState.User;

        var user = await UserManager.GetUserAsync(claims);

        if (HttpContextAccessor.HttpContext!.Request.Cookies.TryGetValue("AccessToken", out var token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
        else
        {
            await CookieService.GetToken(user.Id, user.Email!);
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }

        var query = new GraphQLQuery { Query = $"query {{ getCourseById(id: \"{CourseId}\") {{ id title imageUri imageHeaderUri isBestSeller isDigital categories subtitle starRating reviews likesPercent likes duration authors {{ name }} prices {{ currency price discount }} content {{ description includes programDetails {{ id title description }} }} }} }}" };
        var response = await Http.PostAsJsonAsync("https://courseprovider-silicon-hl.azurewebsites.net/api/graphql?code=7HxNcs9s7LTbK8xSkGVLN9W6v5XDgOJCcj_D31kwYSgGAzFu9L-qMg%3D%3D", query);

        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<RootObject>(jsonString);

            CourseCardModel = result!.Data.getCourseById;
            ContentModel = CourseCardModel.Content;
        }
    }

    public class GraphQLQuery
    {
        public string Query { get; set; } = null!;
    }
}
