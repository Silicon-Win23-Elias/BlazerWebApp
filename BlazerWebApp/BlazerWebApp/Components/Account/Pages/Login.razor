@page "/Account/Login"
@using Newtonsoft.Json
@using System.Text

<PageTitle>Log in</PageTitle>

<section class="signin-section">
    <div class="container">
        <div class="signin-form">
            <h1 class="header1">Welcome Back</h1>
            <p class="m-text">Don’t have an account yet? <NavLink class="signup-link" href="signup">Sign up here.</NavLink></p>
            <StatusMessage Message="@errorMessage" />
            <EditForm FormName="login" Model="Input" OnValidSubmit="LoginUser" method="post" novalidate>
                <DataAnnotationsValidator />
                <label for="signInEmail">Email</label>
                <ValidationMessage For="@(() => Input.Email)" />
                <InputText @bind-Value="Input.Email" id="signInEmail" type="email" class="userinput" placeholder="Enter your email address" />

                <label for="signInPassword">Password</label>
                <ValidationMessage For="@(() => Input.Password)" />
                <InputText @bind-Value="Input.Password" id="signInPassword" type="password" class="userinput" placeholder="Enter your password" />

                <div class="remember-me">
                    <InputCheckbox @bind-Value="Input.RememberMe" id="rememberMe" type="checkbox" asp-for="SignInModel.RememberMe" />
                    <label for="rememberMe">Remember me</label>
                    <button type="submit" class="btn-theme">Sign in</button>

                    <div class="forgot-password">
                        <NavLink class="signup-link" href="/">Forgot your password?</NavLink>
                    </div>
                </div>

            </EditForm>
        </div>
    </div>
</section>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            var user = Context.Users.FirstOrDefault(x => x.Email == Input.Email);

            if (user != null)
            {
                ProfileImageService.Darkomode = user.DarkmodeActive;
            }
            // if (user != null)
            // {
            //     if (user.DarkmodeActive == true)
            //     {
            //         HttpContextAccessor.HttpContext!.Response.Cookies.Append("Darkomode", "darkomode, yayayaya");
            //     }
            //     else
            //     {
            //         HttpContextAccessor.HttpContext!.Response.Cookies.Delete("Darkomode");
            //     }
            // }

            await CookieService.GetToken(Input.Email, Input.Email);

            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);         
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    public class TokenResponse
    {
        public string RefreshToken { get; set; } = null!;
        public string AccessToken { get; set; } = null!;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
